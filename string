//524. Longest Word in Dictionary through Deleting
//isSubsequence(String s, String t)
/**
Input:
s = "abpcplea", d = ["ale","apple","monkey","plea"]

Output: 
"apple"
**/

class Solution {
    public String findLongestWord(String s, List<String> d) {
        String rst = "";
        
        for(String t : d) {
            if(isBetter(t, rst) && isSubsequence(s, t)) {
                rst = t;
            }
        }
        
        return rst;
    }
    
    private boolean isSubsequence(String s, String t) {
        int start = -1;
        for (int i = 0; i < t.length(); i++) {
            start = s.indexOf(t.charAt(i), start+1);
            if (start < 0) return false;
        }
        return true;
    }
    
    private boolean isBetter(String t, String rst) {
        return (t.length() > rst.length()) || (t.length() == rst.length() && t.compareTo(rst) < 0);
    }
    
    public String findLongestWord2(String s, List<String> d) {
        List<String> list = new ArrayList<>();
        
        for(String t : d) {
            if(isSubsequence(s, t)) {
                list.add(t);
            }
        }
        
        Collections.sort(list, (a, b) -> (a.length() != b.length()) ? Integer.compare(b.length(), a.length()) : a.compareTo(b));
        
        return list.isEmpty() ? "" : list.get(0);
    }
    
    public String findLongestWord1(String s, List<String> d) {
        
        Queue<String> queue = new PriorityQueue<>(new Comparator<String>(){
            public int compare(String a, String b) {
                if(b.length() != a.length()) {
                    return Integer.compare(b.length(), a.length());
                }else {
                    return a.compareTo(b);
                }
            }
        });
        
        for(String t : d) {
            if(isSubsequence(s, t)) {
                queue.offer(t);
            }
        }
        
        return queue.isEmpty() ? "" : queue.peek();
    }
    
    private boolean isSubsequence1(String s, String t) {
        int i = 0, j = 0;
        while(i < s.length() && j < t.length()) {
            if(s.charAt(i) == t.charAt(j)){
                j++;
                if(j == t.length()) return true;
            }
            i++;
        }
        return false;
    }
    
    private boolean isSubstring(String a, String b) {
        int[] dict = new int[256];
        
        for(char c : b.toCharArray()) {
            dict[c]++;
        }
        
        int i = 0, j = 0, count = b.length();
        
        while(j < a.length()) {
            if(dict[a.charAt(j)] > 0) count--;
            
            dict[a.charAt(j)]--;
            
            if(count == 0) return true;
            
            j++;
        }
        
        return false;
    }
}
